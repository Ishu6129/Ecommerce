Libraries:
      express ejs nodemon mongoose ejs-mate method-override joi cookie-parser express-session connect-flash passport passport-local
      passport-local-mongoose request jssha

Dummy Data-Seed.js
      For storing initial data

Cookies: 
      client side storage {key:value}
      uses : session management,tracking,personalization
      they are stateful
      Disadvantage: 
            Not secure but signed cookies are secure
      Signed Cookie : 

Session:
      Stores a {key:value} pair
      Server side storage

flash :
      set the flash or make request 
      redirect to page (message servive for one redirect and persist in session until next request)
      read and clear request using middleware
      render flash
      
In cookie we have session id and stored server side
every request cookies are forwarded in which important info is carried

Locals : If we have to repeat again and again so we store in it and can directly access anywhere

passport hashing 
      Strategy used : passport-local
      technique used - passport-local-mongoose (for hashing)
      passport → Authentication middleware for Node.js.

      passport → Authentication middleware for Node.js.
            Handles login, sessions, and strategies (like local, OAuth, JWT).
      passport-local → Strategy for username/password login.
            Defines how to check a user’s credentials locally (without third-party OAuth).
      passport-local-mongoose → Mongoose plugin that simplifies username/password management.
            Automatically adds hashing, salting, authentication methods to your Mongoose User model.
      Provides methods like:
            User.register(user, password) → Creates a new user with hashed password.
            User.authenticate() → Returns a function Passport can use to check credentials.
            User.serializeUser() / User.deserializeUser() → Methods for storing user info in session.

Static Methods - directly apply on scchema